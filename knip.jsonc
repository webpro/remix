{
  "$schema": "https://unpkg.com/knip@2/schema.json",

  "ignore": ["**/*.d.ts"],

  "workspaces": {
    ".": {
      "ignore": [".eslintrc.js"],
      "ignoreDependencies": ["eslint-plugin-markdown"],
      "eslint": false,
      "github-actions": [
        ".github/workflows/*.yml",
        "!.github/workflows/deployments.yml" // In scripts/deployment-test
      ],
      "playwright": {
        "config": "integration/playwright.config.ts",
        "entry": "integration/*-test.ts",
        "project": "integration/**/*.ts"
      }
    },

    "packages/create-remix": {
      "entry": "cli.ts",
      "ignore": ".eslintrc.js"
    },

    "packages/remix-serve": {
      "entry": "cli.ts",
      "ignore": ".eslintrc.js"
    },

    "packages/remix-server-runtime": {
      "ignore": ".eslintrc.js"
    },

    "packages/remix-dev": {
      "entry": ["cli.ts", "server-build.ts"],
      "ignore": ["modules.ts", "**/fixtures/**"],
      "ignoreDependencies": ["express"] // Knip does not understand tryImport("express")
    },

    "packages/remix-eslint-config": {
      "eslint": ["internal.js", "node.js", "jest.js", "jest-testing-library.js"]
    },

    // The "workspaces" below are not defined as such in the root package.json, but Knip is happy to analyze 'em as well
    // By making this explicit they also stay out of the way of the other workspaces.

    "integration/helpers/*": {},

    "templates/*": {
      "ignoreBinaries": ["arc", "deployctl", "fly", "netlify"]
    },

    "scripts/deployment-test": {
      "ignore": "cypress/.eslintrc.js",
      "cypress": {
        "entry": [
          "cypress/support/index.{js,ts}",
          "cypress/e2e/**/*.{js,jsx,ts,tsx}"
        ]
      },
      "github-actions": "../../.github/workflows/deployments.yml"
    },

    // Knip has a Remix plugin and they get along nicely here
    "scripts/playground/template": {
      "entry": ["prisma/seed.ts"]
    }
  }
}
